[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pydantic-argparse"
description = "Typed Argument Parsing with Pydantic"
authors = [{ name = "Hayden Richards", email = "supimdos@gmail.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
dependencies = ["pydantic<2"]
classifiers = [
    "Development Status :: 4 - Beta",
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Framework :: Pydantic',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
keywords = ["python", "pydantic", "argparse", "typed", "validation"]
dynamic = ["version"]

[project.urls]
Homepage = "https://pydantic-argparse.supimdos.com"
Documentation = "https://pydantic-argparse.supimdos.com"
Repository = "https://github.com/SupImDos/pydantic-argparse"
Issues = "https://github.com/SupImDos/pydantic-argparse/issues"

[project.optional-dependencies]
dev = [
    "poethepoet",
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "covdefaults",
    "build",
    "hatch",
]
docs = [
    "mkdocs-material",
    "mkdocstrings[python-legacy]",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-autorefs",
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/pydantic_argparse/__metadata__.py"
build.targets.sdist.include = ["src/*", "LICENSE"]

[tool.poe.tasks]
test = "pytest tests --cov=src"
type = "mypy tests docs src"
lint = "ruff check tests docs src"
clean = "rm -rf **/.coverage **/.mypy_cache **/.pytest_cache **/.ruff_cache **/__pycache__"
build = "hatch build"
publish = "hatch publish"
docs-serve = "mkdocs serve"
docs-publish = "mkdocs gh-deploy --force"

[tool.ruff]
line-length = 120
lint.select = [
    "F",    # flake8
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "D",    # flake8-docstrings
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RUF",  # ruff
]
lint.ignore = [
    "D401",  # imperative mood - overly restrictive
    "S101",  # allow assertions
]
lint.pydocstyle = { convention = "google" }

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true
warn_return_any = true
warn_unused_ignores = true
no_implicit_optional = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
plugins = ["covdefaults"]
