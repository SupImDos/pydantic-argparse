[tool.poetry]
name = "pydantic-argparse"
version = "0.3.0"
description = "Typed Argument Parsing with Pydantic"
authors = ["Hayden Richards <SupImDos@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/SupImDos/pydantic-argparse"
repository = "https://github.com/SupImDos/pydantic-argparse"
keywords = [
    "python",
    "pydantic",
    "argparse",
    "typed",
    "validation",
]
include = [
    "LICENSE",
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^1.8.2"
typing-inspect = "^0.7.1"

[tool.poetry.dev-dependencies]
pylint = "^2.11.1"
mypy = "^0.910"
pytest = "^6.2.5"
pytest-cov = {extras = ["toml"], version = "^3.0.0"}
pytest-mock = "^3.6.1"
poethepoet = "^0.10.0"
toml = "^0.10.2"
types-toml = "^0.10.0"

[tool.poe.tasks]
test = "pytest tests --cov=pydantic_argparse"
type = "mypy tests pydantic_argparse"
lint = "pylint tests pydantic_argparse"
clean = "rm -rf **/.coverage **/.mypy_cache **/.pytest_cache **/__pycache__"

[tool.pytest.ini_options]
addopts = "--verbose"
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s.%(msecs)03d [%(levelname)-8s] (%(name)-11s): %(message)s"
log_cli_date_format = "%Y%m%dT%H%M%S"

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "if __name__ == .__main__.:",
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
# no_implicit_reexport = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
plugins = [
    # "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pylint.master]
# rcfile =
# init-hook =
# ignore =
# ignore-patterns =
persistent = false
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
default-docstring-type = "google"
jobs=1
unsafe-load-any-extension = false
extension-pkg-whitelist = [
    "numpy",
    "pydantic",
]
optimize-ast = false

[tool.pylint.messages_control]
# confidence =
# enable =
disable = [
    # "abstract-method",
    "apply-builtin",
    "arguments-differ",
    # "attribute-defined-outside-init",
    "backtick",
    # "bad-option-value",
    "basestring-builtin",
    "buffer-builtin",
    # "c-extension-no-member",
    "cmp-builtin",
    "cmp-method",
    "coerce-builtin",
    "coerce-method",
    # "consider-using-enumerate",
    "delslice-method",
    "dict-iter-method",
    "dict-view-method",
    # "div-method",
    # "duplicate-code",
    # "eq-without-hash",
    "execfile-builtin",
    "file-builtin",
    "filter-builtin-not-iterating",
    "fixme",
    "getslice-method",
    # "global-statement",
    "hex-method",
    # "idiv-method",
    # "implicit-str-concat-in-sequence",
    # "import-error",
    # "import-self",
    "import-star-module-level",
    # "inconsistent-return-statements",
    "indexing-exception",
    "input-builtin",
    "intern-builtin",
    # "invalid-str-codec",
    "locally-disabled",
    "logging-format-interpolation",
    "logging-fstring-interpolation",
    "long-builtin",
    "long-suffix",
    "map-builtin-not-iterating",
    "metaclass-assignment",
    # "misplaced-comparison-constant",
    # "missing-function-docstring",
    "next-method-called",
    # "next-method-defined",
    "no-absolute-import",
    # "no-else-break",
    # "no-else-continue",
    # "no-else-raise",
    # "no-else-return",
    # "no-init",
    # "no-member",
    # "no-name-in-module",
    # "no-self-use",
    "nonzero-method",
    "oct-method",
    "old-division",
    "old-ne-operator",
    "old-octal-literal",
    "old-raise-syntax",
    "parameter-unpacking",
    "print-statement",
    "raising-string",
    "range-builtin-not-iterating",
    "raw_input-builtin",
    # "rdiv-method",
    "reduce-builtin",
    # "relative-import",
    "reload-builtin",
    "round-builtin",
    "setslice-method",
    # "signature-differs",
    "standarderror-builtin",
    "suppressed-message",
    # "sys-max-int",
    # "too-few-public-methods",
    # "too-many-ancestors",
    # "too-many-arguments",
    # "too-many-boolean-expressions",
    # "too-many-branches",
    # "too-many-instance-attributes",
    # "too-many-locals",
    # "too-many-nested-blocks",
    # "too-many-public-methods",
    # "too-many-return-statements",
    # "too-many-statements",
    # "trailing-newlines",
    "unichr-builtin",
    "unicode-builtin",
    # "unnecessary-pass",
    "unpacking-in-except",
    # "useless-else-on-loop",
    "useless-object-inheritance",
    "useless-suppression",
    "using-cmp-argument",
    "wildcard-import",
    # "wrong-import-order",
    "xrange-builtin",
    "zip-builtin-not-iterating",
]

[tool.pylint.reports]
output-format = "text"
files-output = false
reports = true
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
# msg-template =

[tool.pylint.basic]
good-names = [
    "T",
    "i",
    "j",
    "k",
    "ii",
    "jj",
    "kk",
    "_",
]
bad-names=[
    "foo",
    "bar",
    "baz",
    "toto",
    "tutu",
    "tata",
]
# name-group =
include-naming-hint = false
property-classes = "abc.abstractproperty"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-name-hint = "[a-z_][a-z0-9_]{2,30}$"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
class-attribute-name-hint = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-name-hint = "[a-z_][a-z0-9_]{2,30}$"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
module-name-hint = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
const-name-hint = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
inlinevar-name-hint = "[A-Za-z_][A-Za-z0-9_]*$"
method-rgx = "[a-z_][a-z0-9_]{2,30}$"
method-name-hint = "[a-z_][a-z0-9_]{2,30}$"
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
function-name-hint = "[a-z_][a-z0-9_]{2,30}$"
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
attr-name-hint = "[a-z_][a-z0-9_]{2,30}$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
class-name-hint = "[A-Z_][a-zA-Z0-9]+$"
no-docstring-rgx = "(^test_)$"
docstring-min-length = -1

[tool.pylint.elif]
max-nested-blocks = 5

[tool.pylint.format]
max-line-length = 120
ignore-long-lines = '(?x)(^\s*(\#\ )?<?https?://\S+>?$|^\s*(from\s+\S+\s+)?import\s+.+$)'
single-line-if-stmt = true
no-space-check = [
    "trailing-comma",
    "dict-separator",
]
max-module-lines = 1000
indent-string = "    "
indent-after-paren = 4
# expected-line-ending-format =

[tool.pylint.logging]
logging-modules = [
    "logging"
]

[tool.pylint.miscellaneous]
notes=[
    "FIXME",
    "XXX",
    "TODO",
]

[tool.pylint.similarities]
min-similarity-lines = 20
ignore-comments = true
ignore-docstrings = true
ignore-imports = false

[tool.pylint.spelling]
# spelling-dict =
# spelling-ignore-words =
# spelling-private-dict-file =
spelling-store-unknown-words = false

[tool.pylint.typecheck]
ignore-mixin-members = true
# ignored-modules =
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
]
# generated-members = 
contextmanager-decorators = [
    "contextlib.contextmanager",
    "contextlib2.contextmanager",
]

[tool.pylint.string]
check-quote-consistency = true

[tool.pylint.variables]
init-import = false
dummy-variables-rgx = "(_+[a-zA-Z0-9_]*?$)|dummy"
# additional-builtins =
callbacks = [
    "cb_",
    "_cb",
]
redefining-builtins-modules = [
    "six",
    "six.moves",
    "past.builtins",
    "future.builtins",
    "functools",
]

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "mcs"
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
]

[tool.pylint.design]
max-args = 10
ignored-argument-names = "_.*"
max-locals = 30
max-returns = 6
max-branches = 12
max-statements = 100
max-parents = 7
max-attributes = 10
min-public-methods = 0
max-public-methods = 20
max-bool-expr = 5

[tool.pylint.imports]
deprecated-modules = [
    "regsub",
    "TERMIOS",
    "Bastion",
    "rexec",
    "sets",
    "optparse",
]
# import-graph =
# ext-import-graph =
# int-import-graph =
# known-standard-library =
# known-third-party =
analyse-fallback-blocks = false

[tool.pylint.exceptions]
overgeneral-exceptions = [
    "StandardError",
    "Exception",
    "BaseException",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
